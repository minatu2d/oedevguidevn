<!--?xml version="1.0" encoding="utf-8"?-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<title>MQTT V3.1 Protocol Specification</title>
<link rel="stylesheet" href="MQTT_V3r1_Protocol_Specification_files/style.css" type="text/css">
</head>
<body>
<div><img src="MQTT_V3r1_Protocol_Specification_files/logo.png">
<h1>Đặc tả giao thức MQTT V3.1</h1>
<dl>
	<dt>Tác giả:</dt>
	<dd><a href="http://www.ibm.com/">International Business Machines Corporation (IBM)</a></dd>

	<dd><a href="http://www.eurotech-inc.com/">Eurotech</a></dd>
</dl>
</div>

<div id="abstract">
<h2>Trừu tượng</h2>
<p>
MQ Telemetry Transport (MQTT) (tạm dịch là Giao vận tầm xa) là giao thức truyền message theo mô hình cung cấp/thuê bao publish/subcribe. Nó dựa trện một Broker (điểm trung gian) "nhẹ" (khá ít xử lý), và được thiết kế có tính mở 
(không đăng trưng cho ứng dụng nào), đơn giản, "nhẹ", và dễ để implement. Những đặc trưng này khiến MQTT rất lý tưởng để sử dụng trong các môi trường bị giới hạn tài nguyên như: 
</p>
<ul>
<li>Những nơi mà giá network đắt hoặc băng thông thấp, hay thiếu tin cậy
</li><li>Khi chạy trên một thiết bị nhúng bị giới hạn về tài nguyên tốc độ và bộ nhớ
</li></ul>
<p>
Các đặc trưng của giao thức bao gồm:
</p>
<ul>
<li>Dạng truyền message cung cấp/thuê bao (publish/subcribe) cung cấp việc truyền tin phân tán 1-nhiều and tách biệt các ứng dụng</li>
<li>Việc truyền message là luôn không quan tâm đến nội dung nó truyền/li>
<li>Dựa trên nền TCP/IP để cung cấp đừong truyền</li>
<li>Có 3 loại QoS được đưa ra:
<ul>
<li>"Hầu như chỉ 1 lần ", message được truyền nhận dựa hoàn toàn vào tính tin cận của TCP/IP. Việc mất hoặc lặp message có thể xảy ra. Ở QoS này, có thể ví dụ 1 trường hợp sử dụng: như trong môi trừong sensor mà việc mất 1 gói dữ liệu tại 1 thời điểm không ảnh hưởng đến toàn bộ quá trình.
</li>
<li>"Ít nhất 1 lần", các message được đảm bảo nhận được nhưng có thể xảy ra lặp</li>
<li>"Chính xác chỉ 1 lần", message được đảm bảo đến nơi đúng 1 lần. Ở level này, các hệ thống thanh toán, nơi mà việc lặp hay mất message có thể gây ra việc tính tiền bị sai. 
</li>
</ul>
</li>
<li>Dữ liệu bao bọc dữ liệu truyền (overhead) nhỏ (độ dài cố định luôn là 2 byte), and là gia thức giảm đến mức tối thiểu traffic đường truyền. </li>
<li>Một cơ chế để thông báo đến các thuê bao khi đường truyền bị đứt bất thường, sử dụng Last Will và Testament feature.</li>
</ul>
</div>
<div id="copyright">
<h2>Copyright Notice</h2>
<p>© 1999-2010 Eurotech, International Business Machines Corporation (IBM). All rights reserved.</p>
<p>Permission to copy and display the MQ Telemetry Transport 
specification (the "Specification"), in any medium without fee or 
royalty is hereby granted by Eurotech and International Business 
Machines Corporation (IBM) (collectively, the "Authors"), provided that 
you include the following on ALL copies of the Specification, or 
portions thereof, that you make:
</p>
<ol>
<li>A link or URL to the Specification at one of the Authors' websites.</li>
<li>The copyright notice as shown in the Specification.</li>
</ol>
<p>
The Authors each agree to grant you a royalty-free license, under 
reasonable, non-discriminatory terms and conditions to their respective 
patents that they deem necessary to implement the Specification.
THE SPECIFICATION IS PROVIDED "AS IS," AND THE AUTHORS MAKE NO 
REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT 
LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE 
SPECIFICATION ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE IMPLEMENTATION 
OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, 
TRADEMARKS OR OTHER RIGHTS.
THE AUTHORS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, 
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF OR RELATING TO ANY 
USE OR DISTRIBUTION OF THE SPECIFICATION.
</p>
<p>
The name and trademarks of the Authors may NOT be used in any manner, 
including advertising or publicity pertaining to the Specification or 
its contents without specific, written prior permission. Title to 
copyright in the Specification will at all times remain with the 
Authors.
</p>
<p>No other rights are granted by implication, estoppel or otherwise.</p>
</div>


<div id="toc">
<h2>Mục lục</h2>
<ul class="toc">
	<li><a href="#intro">1. Giới thiệu</a>

		<ul>
			<li><a href="#new">1.1. Thay đổi mới</a></li>
		</ul>
	</li>
	<li><a href="#msg-format">2. Định dạng của message</a>
	<ul>
		<li><a href="#fixed-header">2.1. Header độ dài cố định</a></li>

		<li><a href="#variable-header">2.2. Header độ dài thay đổi</a></li>
		<li><a href="#payload">2.3. Dữ liệu chính (payload)</a></li>
		<li><a href="#msg-id">2.4. Phân loại message</a></li>
		<li><a href="#utf-8">2.5. MQTT and UTF-8</a></li>
	</ul>
	</li>
	<li><a href="#commands">3. Các message command</a>

	<ul>
		<li><a href="#connect">3.1. CONNECT</a></li>
		<li><a href="#connack">3.2. CONNACK</a></li>
		<li><a href="#publish">3.3. PUBLISH</a></li>
		<li><a href="#puback">3.4. PUBACK</a></li>
		<li><a href="#pubrec">3.5. PUBREC</a></li>

		<li><a href="#pubrel">3.6. PUBREL</a></li>
		<li><a href="#pubcomp">3.7. PUBCOMP</a></li>
		<li><a href="#subscribe">3.8. SUBSCRIBE</a></li>
		<li><a href="#suback">3.9. SUBACK</a></li>
		<li><a href="#unsubscribe">3.10. UNSUBSCRIBE</a></li>
		<li><a href="#unsuback">3.11. UNSUBACK</a></li>

		<li><a href="#pingreq">3.12. PINGREQ</a></li>
		<li><a href="#pingresp">3.13. PINGRESP</a></li>
		<li><a href="#disconnect">3.14. DISCONNECT</a></li>
	</ul>
	</li>
	<li><a href="#flows">4. Flows</a>
	<ul>
		<li><a href="#qos-flows">4.1. Quality of Service levels and flows</a></li>
		<li><a href="#retry">4.2. Message delivery retry</a></li>
		<li><a href="#ordering">4.3. Message ordering</a></li>
   </ul>
   </li>
   <li><a href="#appendix-a">Appendix A</a></li>
	</ul>
</div>

<div id="main">
<div id="intro">
<h1>1. Giới thiệu</h1>
<p>Tài liệu đặc tả này được chia làm 3 chương chính:
</p>
<ul><li>Định dạng message cho tất cả các packet</li>
<li>Chi tiết mỗi loại packet</li>
<li>Luồng gói tin giữa client và server</li>
</ul>
<p>
Thông tin về cách mô tả mỗi topic (1 nhóm các tin nhắn) được cung cấp ở phần appendix.
</p>

<div id="new">
<h2>1.1. Thay đổi mới</h2>
<p>Sự thay đổi từ MQTT V3 đến MQTT V3.1:</p>
<ul>
	<li>User và password giờ được gửi qua một gói CONNECT</li>
	<li>Thêm mã trả về cho packet CONNACK để sử dụng cho mục đích security</li>
	<li>Client sẽ không được cho biết về việc các gói chứa command PUBLISH hoặc SUBCRIBE không được xác thực. Một luồng MQTT thông thường sẽ kết thúc thậm chí những command này không được thực hiện. </li>

	<li>String trong MQTT bây giờ hỗ trợ cả UTF8 thay vì chỉ tập nhỏ ASCII.</li>
</ul>
<p>Số version của protocol sẽ có trong gói CONNECT, và trong phiên bản V3r1 này sẽ là 3. Những thực thi MQTT V3 có thể chấp nhận kết nối đến từ version này với độ dài mong muốn vả bỏ quả các thông tin security khác.</p>
</div>
</div>
<!--  ===================================================================== -->
<div id="message-format">
<h1 id="msg-format">2. Định dạng của message</h1>
<p>Phần header cho mỗi message của MQTT command luôn chưa 1 phần độ dài cố đinh. Một số message cũng chứa phần độ dài thay đổi được header và dữ liệu truyền đi. Định dạng của mỗi message header được miêu tả trong các section sau:</p>
<h2 id="fixed-header">2.1. Phần header cố định</h2>
<p>Tất cả các message luôn chứa phần cố định dưới đây:</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Loại Message</td>
			<td>Cờ DUP</td>
			<td colspan="2" align="center">QoS level</td>

			<td>RETAIN</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Độ dài còn lại</td>
		</tr>
	</tbody>

</table>
<dl>

	<dt>Byte 1</dt>
	<dd>
	<p>Chứa loại Message và các cờ (DUP, QoS level, and RETAIN).</p>
	</dd>


	<dt>Byte 2</dt>

	<dd>
	<p>(Ít nhất 1 byte) quy định độ dài còn lại</p>
	</dd>

</dl>
<p>Trường này sẽ được nói đến kĩ hơn. Tất cả dữ liệu là big-endian order: Byte cao sẽ đứng trước byte thấp. Một word 16 bit sẽ được truyền trên dây thành 1 byte Most Significant
(MSB), theo là byte Least Significant(LSB).</p>


<h3>Loại Message</h3>
<b>Vị trí:</b> byte 1, bits 7-4.

<p>Một số 4-bit không dấu diễn tả các giá trị được miêu tả dưới bảng sau:</p>
<table>
	<thead>
		<tr>
			<th>Từ gợi nhớ</th>
			<th align="center">Giá trị thứ tự</th>
			<th>Miêu tả</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>Reserved</td>
			<td align="center">0</td>
			<td>Chưa dùng</td>
		</tr>

		<tr>
			<td>CONNECT</td>
			<td align="center">1</td>
			<td>Client yêu cầu kết nối đến Server</td>
		</tr>
		<tr>
			<td>CONNACK</td>

			<td align="center">2</td>
			<td>Kết nối được chấp nhận</td>
		</tr>
		<tr>
			<td>PUBLISH</td>
			<td align="center">3</td>
			<td>Xuất bản message</td>

		</tr>
		<tr>
			<td>PUBACK</td>
			<td align="center">4</td>
			<td>Xuất bản message được chấp nhận</td>
		</tr>
		<tr>

			<td>PUBREC</td>
			<td align="center">5</td>
			<td>Xuất bản đã được nhận (đảm bảo nhận được part 1)</td>
		</tr>
		<tr>
			<td>PUBREL</td>
			<td align="center">6</td>

			<td>Xuất bản release (đảm bảo nhận được part 2)</td>
		</tr>
		<tr>
			<td>PUBCOMP</td>
			<td align="center">7</td>
			<td>Xuất bản hoàn thành (đảm bảo nhận được part 3)</td>
		</tr>

		<tr>
			<td>SUBSCRIBE</td>
			<td align="center">8</td>
			<td>Yêu cầu subcribe từ client</td>
		</tr>
		<tr>
			<td>SUBACK</td>

			<td align="center">9</td>
			<td>Yêu cầu subcriber được chấp nhận</td>
		</tr>
		<tr>
			<td>UNSUBSCRIBE</td>
			<td align="center">10</td>
			<td>Yêu cầu unsubcribe</td>

		</tr>
		<tr>
			<td>UNSUBACK</td>
			<td align="center">11</td>
			<td>Yêu cầu unsubcribe được chấp nhận</td>
		</tr>
		<tr>

			<td>PINGREQ</td>
			<td align="center">12</td>
			<td>Request PING </td>
		</tr>
		<tr>
			<td>PINGRESP</td>
			<td align="center">13</td>

			<td>Response PING</td>
		</tr>
		<tr>
			<td>DISCONNECT</td>
			<td align="center">14</td>
			<td>Client đang mất kết nối</td>
		</tr>

		<tr>
			<td>Reserved</td>
			<td align="center">15</td>
			<td>Reserved</td>
		</tr>
	</tbody>
</table>

<h3>Các cờ</h3>
<p>Bit còn lại của byte đầu chứa các trường DUP, QoS và RETAIN. Vị trí các bit và ý nghĩa được miêu tả trong bảng dưới đây.</p>
<table>
	<thead>
		<tr>
			<th>Vị trí bit</th>
			<th>Tên viết gọn</th>
			<th>Miêu tả</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td>3</td>
			<td>DUP</td>
			<td>Nhận lặp lại</td>

		</tr>
		<tr>
			<td>2-1</td>
			<td>QoS</td>
			<td>Quality of Service (chất lượng dịch vụ)</td>
		</tr>
		<tr>

			<td>0</td>
			<td>RETAIN</td>
			<td>cờ RETAIN</td>
		</tr>
	</tbody>
</table>
<dl>

	<dt id="dup-flag">DUP</dt>

	<dd>
	<p><b>Vị trí:</b> byte 1, bit 3.</p>
	<p>Cờ này được bật khi client hoặc server đang cố chuyển lại một gói <a href="#publish">PUBLISH</a>, <a href="#pubrel">PUBREL</a>,
   <a href="#subscribe">SUBSCRIBE</a> or <a href="#unsubscribe">UNSUBSCRIBE</a>. Giá trị này được sử dụng trong các mesage mà có QoSS lớn hơn 0 và yêu cầu ACK. Khi bit DUP được set, phần header thay đổi sẽ chưa Message ID.</p>
   <p>Nhìn vào giá trị này sẽ biết được gói tin đã nhận được trước đó hay không. Nó không nên sử dụng để tin ngay rằng có duplicates hay không. </p>
	</dd>


	<dt id="qos-flag">QoS</dt>
	<dd>
	<p><b>Vị trí:</b> byte 1, bits 2-1.</p>
	<p>Cờ này sẽ cho biết độ đảm bảo việc nhận message<a href="#publish">PUBLISH</a>. Giá trị của QoS được miêu tả trong bảng dưới đây.</p>
	<table>

		<thead>
			<tr>
				<th>Giá trị QoS</th>
				<th>bit 2</th>
				<th>bit 1</th>
				<th colspan="3" align="left">Miêu tả</th>
			</tr>

		</thead>
		<tbody>
			<tr>
				<td align="center">0</td>
				<td>0</td>
				<td>0</td>
				<td>Cùng lắm là 1 lần</td>

				<td>Gửi rồi quên ngay</td>
				<td>&lt;=1</td>
			</tr>
			<tr>
				<td align="center">1</td>
				<td>0</td>
				<td>1</td>

				<td>Ít nhất 1 lần</td>
				<td>Xác nhận bằng ACK</td>
				<td>&gt;=1</td>
			</tr>
			<tr>
				<td align="center">2</td>
				<td>1</td>

				<td>0</td>
				<td>Chính xác 1 lần</td>
				<td>Nhận đảm bảo</td>
				<td>=1</td>
			</tr>
			<tr>
				<td align="center">3</td>

				<td>1</td>
				<td>1</td>
				<td colspan="3">Chưa dùng</td>
			</tr>
		</tbody>
	</table>
	</dd>


	<dt id="retain-flag">RETAIN</dt>
	<dd>
	<p><b>Vị trí:</b> byte 1, bit 0.</p>
	<p>Cờ này chỉ được sử dụng ở message <a href="#publish">PUBLISH</a>.
   Khi client gửi 1 message PUBLISH đến server, nếu cờ Retain được set (1), thì server phải hiểu rằng nên giữ message này ngay cả sau khi chuyển nó đến các subcribers hiện tại</p>
   <p>Khi có 1 subcription mới được thiết lập trên 1 topic, message cuối cùng của topic đó nên được gửi đến subscriber với 1 trường Retain được set trong header. Nếu không có messsage nào còn, thì không cần gửi gì hết.</p>
   <p>Trường này sẽ có ích khi publisher gửi message để báo "report bằng ngoại lệ" ,
   thỉnh thoảng là nơi giữa các message. Điều này cho phép những subcribers mới nhanh chóng nhận dữ cần thiết, hoặc giá trị kiểu Méo mó có hơn không.</p>
   <p>Trường hợp mà server chuyển tiếp nội dung vừa nhận được từ một Publisher thì trường Retain sẽ không được set. Điều này sẽ giúp phân biệt được message có từ trước với message mới được publish lên.</p>
   <p>Message Retained sẽ được giữ thậm chí sau khi restart lại server</p>
	<p>Server sẽ xóa message được retained nếu nó nhận đựoc một message với payload bằng zero.</p>
	
	</dd>

</dl>


<h3>Độ dài còn lại</h3>
<p><b>Vị trí:</b> byte 2.</p>

<p>Miêu tả độ dài bao gồm cả phần header và payload có trong message</p>
<p>Việc encoding với độ dài thay đổi sử dụng 1 byte để miêu tả độ dài, vì thế độ dài tối đa sẽ là 127. Những message dài hơn sẽ được miêu tả theo cách sau.
7 bít được dùng để miêu tả giá trị, bít còn lại dùng để miêu tả phía sau còn byte nào miêu tả trường này hay không. Mỗi byte tiếp sau đó cũng như vậy 7 bit để lưu giá trị, 1 bít gọi là bit tiếp tục. Giá trị được tính bằng cách nhân giá trị được diên tả bởi 7 bit và lũy thừa tăng dần của 128. Ví dụ miêu tả độ Remain Length = 64, ta chỉ cần 1 byte, trong đó 7 bytes để miêu tả giá trị 64, 1 bit còn lại bằng 0. Một ví dụ nữa, giá trị là 321 chẳng hạn 321 = 65*128^0 + 2* 128^1, ta cần 2 byte để biểu diễn. Byte đầu chứa giá trị 65 trong 7 bit và bit còn lại là 1. Byte thứ 2 chứa giá trị 2 ở 7 bit và 1 bit chứa giá trị bằng 0.</p>
<p>Trường này được biểu diễn tối đa trong 4 byte. Tức là cho độ dài cho phép sẽ là đến 268 435 455 (256 MB)</p>
<p>Bảng sau miêu tả độ dài có thể biểu diễn với các số byte tương ứng.</p>
<table>
	<thead>
		<tr>
			<th>Số byte</th>

			<th>Độ dài min</th>
			<th>Độ dài max</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td align="center">1</td>

			<td>0 (0x00)</td>
			<td>127 (0x7F)</td>
		</tr>
		<tr>
			<td align="center">2</td>
			<td>128 (0x80, 0x01)</td>
			<td>16&nbsp;383 (0xFF, 0x7F)</td>

		</tr>
		<tr>
			<td align="center">3</td>
			<td>16&nbsp;384 (0x80, 0x80, 0x01)</td>
			<td>2&nbsp;097&nbsp;151 (0xFF, 0xFF, 0x7F)</td>
		</tr>

		<tr>
			<td align="center">4</td>
			<td>2&nbsp;097&nbsp;152 (0x80, 0x80, 0x80, 0x01)</td>
			<td>268&nbsp;435&nbsp;455 (0xFF, 0xFF, 0xFF, 0x7F)</td>
		</tr>

	</tbody>
</table>
<p>Thuật toán để chuyển giá trị ở hệ cơ số 10 sang sạng  encode này được miêu tả bằng mã giả sau:</p>
<code class="block">do
  digit = X MOD 128
  X = X DIV 128
  // Nếu cần nhiều byte hơn để encoding
  if ( X &gt; 0 )
    digit = digit OR 0x80
  endif
  'output' digit
while ( X&gt; 0 )</code>
<p>Ở đây, <code>MOD</code> là phép toán lấy phần dư (<code>%</code> in
C), <code>DIV</code> trong số nguyên (<code>/</code> in C), và <code>OR</code>

phép HOẶC bít hay (<code>|</code> trong C).</p>
<p>Thuật toán để decoding dãy byte ra giá trị thập phân ban đầu:</p>
<code class="block">multiplier = 1 
value = 0 
do 
  digit = 'next digit from stream' 
  value += (digit AND 127) * multiplier 
  multiplier *= 128
while ((digit AND 128) != 0)</code>
<p>Ở đây<code>AND</code> là phép VÀ bit (<code>&amp;</code>
in C).</p>
<p>Khi thuật toán kết thúc, <code>giá trị còn lại trong </code> contains the
bytes là Remaining Length </p>

<p class="tip">Phần encoding của Remaining Length không phải là một phần của header. Số byte dùng để Encoding không được biết trong giá trị trường Remaining Length. Phần quy định có độ dài có thể thay đổi nằm ở Header, còn phần thay đổi thì không phải một phần của header.</p>


<h2 id="variable-header">2.2. Header có độ dài thay đổi được</h2>
<p>Một vài loại MQTT message cũng chưa những phần có đội dài thay đổi được. Nó nằm giữa phần header cố định và phần payload.</p>
<p class="tip">Phẩn thay đổi được của Remaining Length sẽ không nằm ở phần header thay đổi được.  Phần byte thay đổi đựoc của Remaining Length thuộc về phần header và payload, xem <a href="#fixed-header">Fixed header</a> để biết thêm chi tiết.</p>
<p>Định dạnh của các trường thay đổi được trong header đuợc miêu tả bên dưới đây:</p>


<h3>Protocol name</h3>
<p>Xuất hiện trong message
<a href="#connect">CONNECT</a>. Trường này sẽ chứa tên MQIsdp ở dạng chữ hoa</p>


<h3>Protocol version</h3>
<p>Xuất hiện trong phần header của message
<a href="#connect">CONNECT</a> .</p>
<p>8 bit  biểu diễn một giá trị không dấu là revision của protocol. Giá trị của trường Protocol version ở version hiện tại đuợc miêu tả dưới bảng sau: </p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td></td>
			<td colspan="8" align="center">Protocol Version</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
		</tr>
	</tbody>
</table>


<h3>Connect flags</h3>
<p>Giá trị này quy định cờ Clean Session, cờ Will, cờ Will QoS, và cờ Retain flags được chứa trong phần header thay đổi đựoc của message<a href="#connect">CONNECT</a> </p>


<h3 id="clean-session-flag">Clean session flag</h3>
<p><b>Position:</b> Bit đầu tiên của byte Connect flags</p>
<p>Nếu không được set (tức là giá trị bằng 1), thì server phải lưu lại những subscriptions sau khi client này đứt kết nối. Nó bao gồm việc tiếp tục lưu những message có QoS bằng 1 và QoS bằng 2 cho các topic đã subscribed vì thế, chúng có thể được chuyển đi khi client kết nối lại. Server cũng phải cập nhật trạng thái "lơ lửng" của message đang được chuyển đi tại thời điểm mà connection bị lost. Thông tin này phải được giữ đến khi client kết nối lại.</p>
<p>Nếu mà được set (tức giá trị bằng 1), thì server phải quên hết những thông tin trước đó về client, phải coi như là xóa sạch. Sever cũng phải quên hết mọi trạng thái của client này khi nó đứt kết nối.</p>
<p>Thông thường, client sẽ thực hiện trong 1 mode (hoặc là luôn clean hoặc là luôn không), it khi thay đổi.
Lựa chọn này phụ thuộc vào ứng dụng. Client kết nối với một clean conenction sẽ không nhận được những thông tin trước đó, nó phải subscribe lại tại mỗi lần kết nối. Client với kết nối dạng non-clean session sẽ không miss bất cứ gói tin QoS 1 hoặc QoS 2 nào, khi nó được published trong lúc client đứt kết nối. 
QoS 0 sẽ không bao giờ được lưu lại, vì vậy nó chỉ được chuyển đi theo cách thức cố gắng hết mức ở thời điểm nó được publish thôi.</p>
<p>Cờ này cũng được biết đến với một nghĩa khác "Clean start". Nó được đổi tên để phù hợp với ý nghĩa là nó được áp dụng cho toàn bộ session, chứ không riêng gì connect khởi tạo .</p>
<p>Một server có thể cung cấp một cơ chế quản trị cho phép có xóa các thông tin đã lưu về client hay không. Nó có thể được sử dụng trong trường hợp biết chắc chắn rằng client nào đó không bao reconnect.</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>

			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>

			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td align="center">User Name Flag</td>

			<td align="center">Password Flag</td>
			<td align="center">Will Retain</td>
			<td colspan="2" align="center">Will QoS</td>
			<td align="center">Will Flag</td>
			<td align="center">Clean Session</td>
			<td align="center">Reserved</td>

		</tr>
		<tr>
			<td></td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center"></td>
			<td align="center">x</td>
		</tr>
	</tbody>
</table>
<p>Bit số 0 của byte này không được sử dụng troverserverrsion hiện tại của protocol. Nó có thể được sử dụng trong tương lai.</p>


<h3>Will flag</h3>
<p><b>Position:</b> Bit thứ 2 của byte Connect flags</p>
<p>Trường này định nghĩa rằng, một message được published bởi server nhân danh cho một client mà server không thể giữ kết nối bằng Keep Alive hoặc có lỗi I/O trong quá trình kết nối với Client. Phải phân biệt với trường hợp server nhận được message DISCONNECT từ Client, khi đó nó sẽ không gửi Will message</p>
<p>Nếu cờ này được set, Will QoS và Will Retain sẽ được biểu diễn trong trong cờ Connect và các trường của Will Topic và Will Message phải có trong phần payload.</p>
<p> Định dạng của cờ Will được chỉ ra trong bảng dưới đây:.</p>
<table class="bits">
	<thead>

		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td></td>
			<td align="center">User Name Flag</td>
			<td align="center">Password Flag</td>
			<td align="center">Will Retain</td>
			<td colspan="2" align="center">Will QoS</td>
			<td align="center">Will Flag</td>

			<td align="center">Clean Session</td>
			<td align="center">Reserved</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center"></td>
			<td align="center">x</td>
			<td align="center">x</td>

		</tr>
	</tbody>
</table>
<p>Bit 0 của byte này chưa được sử dụng trong phiên bản hiện tại của protocol này.</p>


<h3>Will QoS</h3>
<p><b>Position:</b>Byte 3, 4 của byte Connect Flags </p>
<p>Một quy định về QoS cho message Will là trường Will QoS, message này được gửi để báo về event đứt kết nối với Client không tự nguyện. Message Will được định nghĩa trong phần payload của message 
of a <a href="#connect">CONNECT</a> .</p>

<p>Nếu cờ Will flags được set, thì trường Will QoS sẽ là bắt buộc, ngoài ra nó sẽ bị bỏ qua.</p>
<p>Các giá trị của Will QoS is 0 (0x00), 1 (0x01), or 2 (0x02). Bảng miêu tả giá trị của cờ này được miêu tả dưới bảng sau.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td align="center">User Name Flag</td>
			<td align="center">Password Flag</td>
			<td align="center">Will Retain</td>

			<td colspan="2" align="center">Will QoS</td>
			<td align="center">Will Flag</td>
			<td align="center">Clean Session</td>
			<td align="center">Reserved</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center"></td>
			<td align="center"></td>
			<td align="center">1</td>
			<td align="center">x</td>

			<td align="center">x</td>
		</tr>
	</tbody>
</table>
<p>Bit 0 không được dùng trong phiên bản này này của procol. Nó có thể được sử dụng trong tương lai.</p>


<h3>Will Retain flag</h3>
<p><b>Position:</b> Bít 5 của byte Connect flags .</p>

<p>Cờ Will Retain flag sẽ quy định có hay không việc giữ lại message Will đã được published khi client đứt kết nối bất thường.</p>
<p>Cờ Will Retain flag là bắt buộc nếu Will flag được set,
ngoài ra, nó sẽ bị bỏ qua. Định dạng của cờ này được miêu tả trong bảng sau.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td align="center">User Name Flag</td>
			<td align="center">Password Flag</td>
			<td align="center">Will Retain</td>

			<td colspan="2" align="center">Will QoS</td>
			<td align="center">Will Flag</td>
			<td align="center">Clean Session</td>
			<td align="center">Reserved</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center"></td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">1</td>

			<td align="center">x</td>
			<td align="center">x</td>
		</tr>
	</tbody>
</table>
<p>Bit 0 không được sử dụng trong version này của protocol. Nó có thể được sử dụng trong các phiên bản sau.</p>

<h3>User name and password flags</h3>
<p><b>Position:</b> Bit 6, 7 của byte Connect flags .</p>

<p>Một kết nối từ client có thể chỉ ra user và password, thiết lập các trường để thông báo rằng có User và Password (tùy chọn) trong phần payload của Message CONNECT <a href="#connect">CONNECT</a> .</p>
<p>Nếu trường User Name được set, thì trường User Name là bắt buộc,
ngoài ra nó, sẽ bị bỏ qua. Nếu cờ Password được set, thì trường Password là bắt buộc, mặt khác nó sẽ bỏ qua giá trị này.  Nó sẽ không quan tâm đến Password nếu không cung cấp Username.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>

			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>

			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td align="center">User Name Flag</td>
			<td align="center">Password Flag</td>

			<td align="center">Will Retain</td>
			<td colspan="2" align="center">Will QoS</td>
			<td align="center">Will Flag</td>
			<td align="center">Clean Session</td>
			<td align="center">Reserved</td>
		</tr>

		<tr>
			<td></td>
			<td align="center"></td>
			<td align="center"></td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
		</tr>
	</tbody>
</table>
<p>Bit 0 chưa được sử dụng trong phiên bản này của protocol. Nó có thể được sử dụng trong tương lai.</p>

<h3 id="keep-alive-timer">Keep Alive timer</h3>
<p>The Keep Alive timer được chứa bên trong phần header thay đổi được của message
<a href="#connect">CONNECT</a> .</p>
<p>The Keep Alive timer,  được tính bằng second, định nghĩa interval time lớn nhất giữa các message nhận từ client. Trường này giúp server phát hiện được khi nào kết nối đến client bị đứt mà không cần phải đợi TCP/IP timeout. Client có trách nhiệm gửi 1 message trong mỗi chu kì Keep Alive. Khi không xuất hiện các message liên quan đến Data trong chu kì này thì client phải gửi một message <a href="#pingreq">PINGREQ</a> , và khi đó server sẽ trả lời bằng message
<a href="#pingresp">PINGRESP</a>.</p>
<p>Nếu server không nhận được message trong vòng 1.5 chu kì của Keep Alive (clients sẽ được "ân hạn" thêm một nửa chu kì), Nó sẽ disconnect với clients như là khi client gửi message <a href="#disconnect">DISCONNECT</a>. Hành động này không ảnh hưởng đến bất kì subscriptions nào của client. Xem thêm về 
<a href="#disconnect">DISCONNECT</a> để biết thêm chi tiết.</p>
<p>Nếu client không nhận được message <a href="#pingresp">PINGRESP</a>
trong khoảng 1 chu kì Keep Alive sau khi gửi một message <a href="#pingreq">PINGREQ</a>,
thì nó nên đóng kết nối TCP/IP lại.</p>


<p>Keep Alive timer là một giá trị 16 bit biểu diễn số second của chu kì này. Giá trị khi sử dụng sẽ phụ thuộc vào ứng dụng, nó thường là vãi phút. Giá trị lớn nhất có thể là 18 giờ. Nếu giá trị này là Zero, có nghĩa là client không bị mất kết nối. </p>
<p>Định dạng của Keep Alive được chỉ ra dưới bảng sau. Thứ tự byte là byte cao trước(MSB), byte thấp sau(LSB).</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td></td>
			<td colspan="8" align="center">Keep Alive MSB</td>
		</tr>
		<tr>
			<td></td>

			<td colspan="8" align="center">Keep Alive LSB</td>
		</tr>
	</tbody>
</table>


<h3>Connect return code</h3>
<p>Mã kết nối được trả về được gửi trong phần header thay đổi được của message
<a href="#connack">CONNACK</a> message.</p>
<p>Trường này định nghĩa một bở một byte có giá trị >=0. Ý nghĩa của mỗi giá trị được miêu tả trong bảng bên dưới. Tuy giá trị trả về có ý nghĩa thay đổi theo từng loại message. Thông thường, trả về 0 có nghĩa là success. </p>
<table>

	<thead>
		<tr>
			<td>Thứ tự</td>
			<td>HEX</td>
			<td>Ý nghĩa</td>
		</tr>
	</thead>

	<tbody>
		<tr>
			<td>0</td>
			<td>0x00</td>
			<td>Kết nối được chấp nhận.</td>
		</tr>
		<tr>

			<td>1</td>
			<td>0x01</td>
			<td>Kết nối bị từ chối : phiên bản của protocol không được chấp nhận. </td>
		</tr>
		<tr>
			<td>2</td>
			<td>0x02</td>

			<td>Kết nối bị từ chối: identifier bị bỏ, hay không hợp lệ</td>
		</tr>
		<tr>
			<td>3</td>
			<td>0x03</td>
			<td>Kết nối bị từ chối: server không sẵn sàng</td>
		</tr>

		<tr>
			<td>4</td>
			<td>0x04</td>
			<td>Kết nối bị từ chối: sai user name hoặc password</td>
		</tr>
		<tr>
			<td>5</td>

			<td>0x05</td>
			<td>Kết nối bị từ chối: chưa được xác thực</td>
		</tr>
		<tr>
			<td>6-255</td>
			<td></td>
			<td>Sử dụng trong tương lai</td>

		</tr>
	</tbody>
</table>
<br>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>

			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>

			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td colspan="8" align="center">Return Code</td>
		</tr>

	</tbody>
</table>


<h3>Topic name</h3>
<p>The topic name được chưa trong phần header thay đổi được của một message <a href="#publish">PUBLISH</a> .</p>
<p>The topic name là chìa khóa để xác định thông tin về kênh thông tin mà payload sẽ được published tới. Subscribers sử dụng trường này để xác định kênh thông tin mà nó muốn nhận được.</p>
<p>The topic name là một xâu UTF-encoded. Xem thêm ở chương <a href="#utf-8">MQTT
and UTF-8</a> để biết thêm thông tin chi tiết. Topic name có giới hạn trên của độ dài là
32,767 kí tự.</p>


<h2 id="payload">2.3. Payload</h2>
<p>Nhưng message dưới đây sẽ có payload:</p>
<dl>

	<dt><a href="#connect">CONNECT</a></dt>
	<dd>Nó chứa một hoặc nhiều chuỗi UTF-8 encoded. Trong đó, chỉ định rõ một identifier duy nhất cho client, một Will topic and message and và cả user name, password nữa. Không phải tất cả chúng đều xuất hiện và sự xuất hiện của chúng được quy định bởi một tập các cờ phía trước.</dd>


	<dt><a href="#subscribe">SUBSCRIBE</a></dt>

	<dd>Chứa một danh sách các topic name mà client có thể subcribe và cả QoS level nữa. Tất cả chúng cũng là UTF-encoded.</dd>


	<dt><a href="#suback">SUBACK</a></dt>
	<dd>Payload sẽ chưa một danh sách của các QoS level được cho phép. Có một mức QoS level mà administrators của server cho phép client sử dụng để subcribe đến một Topic name cụ thể. Những QoS level này được liệt kê cùng thứ tự tương ứng với danh sách các Topic Name trong message SUBSCRIBE.</dd>

</dl>
<p>Phần payload của message <a href="#publish">PUBLISH</a> chỉ chứa dữ liệu cho ứng dụng cụ thể. Không thể giả định chúng được tạo bởi dữ liệu tự nhiên hay nội dung của dữ liệu "sống", phần này sẽ được hiểu là một BLOB.</p>

<p>Nếu bạn muốn ứng dụng thực hiện việc nén dữ liệu đưa vào trong payload data, bạn cần định nghĩa trong ứng dụng một cờ payload tương ứng để xử lý nhưng dữ liệu payload này. Bạn không thể định nghĩa một cờ chỉ cho ứng dụng cụ thể bên trong bất cứ thành phần nào của header.</p>


<h2 id="msg-id">2.4. Message identifiers</h2>
<p>The message identifier được xuất hiện trong phần header của các message dưới đây: PUBLISH, PUBACK, PUBREC, PUBREL, PUBCOMP,
SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK.</p>
<p>Trường Message Identifier (Message ID) chỉ xuất hiện trong message khi giá trị QoS bit miêu tả trong header chỉ định đến giá trị QoS 1 hoặc
2. Xem thêm ở <a href="#qos-flows">Quality of Service levels and flows</a> để biết thêm thông tin chi tiết.</p>
<p>The Message ID là một giá trị integer 16 bit không dấu và phải là duy nhất trong tập các message ở một hướng kết nối cụ thể nào đó. Thông thường người ta thường tăng lên sau mỗi message nhưng việc tăng này là không bắt buộc.</p>
<p>A client sẽ phải maintain một danh sách các message IDs để tách biệt với Message ODs được sử dụng server mà nó kết nối đến. Điều này cho phép việc gửi một PUBLISH với message ID bằng 1 tại đúng thời điểm nhận một message được PUBLISH lên server với message ID bằng 1.</p>
<p>Thứ tự 2 byte ở đây là MSB , sau đó đến LSB</p>

<p>Đừng sử dụng Message ID là 0. Nó thường được sử dụng là Invalid Message ID</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td></td>
			<td colspan="8" align="center">Message Identifier MSB</td>
		</tr>
		<tr>
			<td></td>

			<td colspan="8" align="center">Message Identifier LSB</td>
		</tr>
	</tbody>
</table>

<h2 id="utf-8">2.5. MQTT and UTF-8</h2>
<p>UTF-8 is là một encoding hiệu quả của cho chuỗi Unicode character-strings, nó vẫn tối ưu việc Encoding các kí tự ASCII trong môi trường giao tiếp dạng text tuần túy.</p>
<p>Trong MQTT, mỗi xâu được gắn với một phần prefixed có độ dài 2 byte, biểu diễn độ dài của toàn bộ xâu được Encoded, như bảng dưới đây:</p>
<table class="bits">
	<thead>

		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td>byte 1</td>
			<td colspan="8" align="center">String Length MSB</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">String Length LSB</td>

		</tr>
		<tr>
			<td>bytes 3 ...</td>
			<td colspan="8" align="center">Encoded Character Data</td>
		</tr>
	</tbody>
</table>
<p>String Length là độ dài byte của xâu sau khi được encoded, chứ không phải là số lượng kí tự, not the number of characters.
Ví dụ như này, xâu "OTWP" được Encoded trong UTF-8 như bảng dưới đây.</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="8" align="center">Message Length MSB (0x00)</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Message Length LSB (0x04)</td>
		</tr>

		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 3</td>
			<td colspan="8" align="center">'O' (0x4F)</td>

		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 4</td>

			<td colspan="8" align="center">'T' (0x54)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>

		<tr>
			<td>byte 5</td>
			<td colspan="8" align="center">'W' (0x57)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 6</td>
			<td colspan="8" align="center">'P' (0x50)</td>
		</tr>
		<tr>

			<td></td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
	</tbody>
</table>

<p>Data stream của Java sử dụng<code>writeUTF()</code> and <code>readUTF()</code> theo định dạng như trên.</p>


<h2 id="unused-bits">2.6. Unused bits</h2>
<p>Những bit được đánh dấu không sử dụng thường được set bằng (0).</p>

</div>

<!--  ===================================================================== -->
<div id="commandssec">
<h1 id="commands">3. Command messages</h1>
<ul class="toc">
	<li><a href="#connect">CONNECT</a></li>
	<li><a href="#connack">CONNACK</a></li>
	<li><a href="#publish">PUBLISH</a></li>

	<li><a href="#puback">PUBACK</a></li>
	<li><a href="#pubrec">PUBREC</a></li>
	<li><a href="#pubrel">PUBREL</a></li>
	<li><a href="#pubcomp">PUBCOMP</a></li>
	<li><a href="#subscribe">SUBSCRIBE</a></li>
	<li><a href="#suback">SUBACK</a></li>

	<li><a href="#unsubscribe">UNSUBSCRIBE</a></li>
	<li><a href="#unsuback">UNSUBACK</a></li>
	<li><a href="#pingreq">PINGREQ</a></li>
	<li><a href="#pingresp">PINGRESP</a></li>
	<li><a href="#disconnect">DISCONNECT</a></li>
</ul>

<h2 id="connect">3.1. CONNECT - Client yêu cầu connect đến server</h2>
<p>Khi một một kết nối TCP/IP được thiết lập từ client đến server, thì một session ở mức protocol cũng được tạo sử dụng luồng CONNECT.
</p>

<h3>Header cố định</h3>
<p>Định dạng được thấy dưới bảng sau:.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>

			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>

			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>

			<td colspan="4" align="center">Message Type (1)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length</td>
		</tr>

	</tbody>
</table>
<p>Cờ DUP, QoS, and RETAIN không được sử dụng trong message CONNECT
.</p>
<p>Remaining Length là độ dài của phần header thay đổi được(12 bytes)
và độ dài . Nó có thể là nhiều byte.</p>


<h3>Variable header</h3>
<p>Một ví dụ về định dạng của phần header biến đổi được có thể thấy trong bảng sau.</p>
<table class="bits">
	<thead>
		<tr>

			<th></th>
			<th>Description</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td colspan="10">Protocol Name</td>
		</tr>
		<tr>
			<td>byte 1</td>
			<td>Length MSB (0)</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td>Length LSB (6)</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>

		</tr>
		<tr>
			<td>byte 3</td>
			<td align="center">'M'</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 4</td>
			<td align="center">'Q'</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 5</td>
			<td align="center">'I'</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 6</td>
			<td align="center">'s'</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 7</td>
			<td align="center">'d'</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>

		<tr>
			<td>byte 8</td>
			<td align="center">'p'</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>

		<tr>
			<td colspan="10">Protocol Version Number</td>
		</tr>
		<tr>
			<td>byte 9</td>
			<td>Version (3)</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">1</td>
		</tr>
		<tr>
			<td colspan="10">Connect Flags</td>
		</tr>
		<tr>
			<td>byte 10</td>

			<td>User name flag (1)<br>
			Password flag (1)<br>
			Will RETAIN (0)<br>
			Will QoS (01)<br>
			Will flag (1)<br>
			Clean Session (1)</td>

			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">1</td>
			<td align="center">x</td>
		</tr>
		<tr>
			<td colspan="10">Keep Alive timer</td>
		</tr>
		<tr>

			<td>byte 11</td>
			<td>Keep Alive MSB (0)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 12</td>

			<td>Keep Alive LSB (10)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
		</tr>
	</tbody>
</table>

<dl>
	<dt>User name flag</dt>

	<dd>Set (1).</dd>
	
	<dt>Password flag</dt>
	<dd>Set (1).</dd>

	<dt>Clean Session flag</dt>
	<dd>Set (1).</dd>

	<dt>Keep Alive timer</dt>
	<dd>Set to 10 seconds (0x000A).</dd>


	<dt>Will message</dt>
	<dd>
	<ul>
		<li>Will flag is set (1)</li>

		<li>Will QoS field is 1</li>
		<li>Will RETAIN flag is clear (0)</li>
	</ul>
	</dd>

</dl>

<h3>Payload</h3>
Payload của message CONNECT chưa một hoặc nhiều xâu UTF-8 dựa trên các cờ ở phần header thay đổi được. Nhưng xâu này, nếu có sẽ xuất hiện theo thứ tự sau:
<dl>

	<dt>Client Identifier</dt>
	<dd>
	<p>Xâu được encode UTF đầu tiên. The Client Identifier (Client ID)
	có độ dài từ 1 đến 23 kí tự, và nó xác định một định danh duy nhất của client kết nối đến server. Nó phải là duy nhất khi so sánh với các clients khác, và nó là key để chuyển các message với QoS là 1 và 2. Nếu Client ID chứa nhiều hơn 23 kí tự, server sẽ trả lời yêu cầu CONNECT với mã là 2:
	Không chấp nhận định danh.</p>
	</dd>


	<dt>Will Topic</dt>
	<dd>

	<p>nếu  Will Flag được set, thì đây sẽ là chuỗi UTF-8 tiếp theo. Message Will sẽ được published đến Will Topic. QoS level sẽ được xác định bằng Will QoS field , và 
	RETAIN status sẽ được xác định bằng cờ Will RETAIN flag trong phần header thay đổi. </p>
	</dd>


	<dt>Will Message</dt>
	<dd>
	<p>Nếu cờ Will Flag được set, thì đây là xâu UTF-8 tiếp theo. Message Will định nghĩa nội dung của message cái mà sẽ được published đến Will Topic nếu client bị disconnect bất thường. Xâu này cũng có thể là xâu rỗng tức là độ dài bằng 0.</p>
	<p>Mặc dù message Will Message được encoded trong message
	CONNECT, khi nó published đến Will Topic thì chỉ bytes của messages được gửi, không phải là 2 byte quy định độ dài đầu tiên. Phần message này phải chỉ có thể chứa các kí tự ASCII 7 bit.</p>

	</dd>

	<dt>User Name</dt>
	<dd>
	<p>Nếu User Name flag được set, đây sẽ là xâu UTF-encoded tiếp theo.  Trường này xác định tên của user đang kết nối đến, được sử dụng để authention.
	Dù không bắt buộc nhưng user name nên có độ dài từ 12 kí tự trở xuống.
	</p>
	<p>Chú ý rằng, vì lý do tương thích với MQTT version 3, 
	trường Remaining Length từ phần header cố định được ưu tiên so với cờ User Name.  Server phải có khả năng cho phép trường hợp mà cờ User Name được set nhưng trường User Name bị thiếu vẫn hợp lệ.  Nó nên được đánh giá là hợp lệ và vẫn cho kết nối được tiếp tục.</p>
	</dd>

	<dt>Password</dt>
	<dd>
	<p>Nếu Password flag được set, đây sẽ xâu UTF-8 kế tiếp.  Password cho user tương ứng đang kết nối đến, được sử dụng cho việc authentication.
	Nên để password có độ dài từ 12 kí tự trở xuống dù điều này không bắt buộc.
	</p>
	<p>Chú ý rằng, vì lý do tương thích với MQTT version 3, 
	trường Remaining Length field trong phần header cố định sẽ được ưu tiên hơn trạng thái cờ Password flag.  Server nên cho phép trường hợp Password flag được set, nhưng không có xâu Password sẽ vẫn hợp lệ. Nó nên tiếp tục cho phép kết nối và thực hiện các message khác.</p>
	</dd>
</dl>


<h3>Response</h3>

<p>Server sẽ gửi message CONNACK để trả lời message CONNECT từ client.</p>
<p>Nếu server không nhận được mesage CONNET từ client trong một khoang thời gian nào đó sau khi thiết lập kết nối TCP/IP, thì server nên đóng kết nối đó lại.</p>
<p>Nếu client không nhận được một message CONNACK từ server trong một khoảng thời gian nhất định, thì client cũng nên đóng kết nối đó lại, và restart session bằng một socket mới đến server rồi tiếp tục gửi yêu cầu kết nối bằng gói CONNECT.</p>
<p>Trong cả 2 trường hợp trên, thời gian chờ để nhận được message CONNECT hăocj CONNACK phụ thuộc vào ứng dụng và điều kiện kết nối.</p>
<p>Nếu một client kết nối bằng một Client ID đang được kết nối với Server rồi, thì client trước đó phảu được disconnect bắt buộc bởi server trước khi thực hiện luồng CONNECT với client mới .</p>
<p>Nếu client gửi một một message CONNECT không hợp lệ, server nên đóng kết nối luôn. Không hợp ở đây bao gồm việc khác nhau về Protocol Name hoặc Protocol Version Numbers. Nếu server đã parse message CONNECT rồi mới phát hiện ra có một trường nào đó không hợp lệ, nó nên gửi lại message CONNACK chứa nội dung mã có nội dung "Kết nối bị từ chối: phiên bản protocol không được chấp nhận" trước khi hủy kết nối này.</p>

<h2 id="connack">3.2. CONNACK - Acknowledge connection request</h2>
<p>Message CONNACK được gửi bởi server như để trả lời một yêu cầu a <a href="#connect">CONNECT</a> từ client.</p>

<h3>Phần header cố định</h3>
<p>Có định dạng như bảng dưới đây.</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message type (2)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS flags</td>

			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
		</tr>

		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length (2)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<p>Các cờ DUP, QoS and RETAIN không được sử dụng trong message CONNACK.</p>


<h3>Phần header thay đổi</h3>

<p>Định dạng được chỉ ra ở bảng dưới đây.</p>

<table class="bits">
	<thead>
		<tr>
			<th></th>
			<th>Description</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td colspan="10">Topic Name Compression Response</td>
		</tr>
		<tr>
			<td>byte 1</td>
			<td>Reserved values. Not used.</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
		</tr>
		<tr>
			<td colspan="10">Connect Return Code</td>
		</tr>
		<tr>

			<td>byte 2</td>
			<td>Return Code</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>

			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<p>Mỗi giá trị trả về của Connect được chỉ ra dưới bảng sau</p>
<table>
	<thead>
		<tr>
			<td>Enumeration</td>

			<td>HEX</td>
			<td>Meaning</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>0</td>

			<td>0x00</td>
			<td>Kết nối được chấp nhận</td>
		</tr>
		<tr>
			<td>1</td>
			<td>0x01</td>
			<td>Kết nối bị từ chối: Phiên bản protocol không được chấp nhận. </td>

		</tr>
		<tr>
			<td>2</td>
			<td>0x02</td>
			<td>Kết nối vị từ chối: Định danh không hợp lệ</td>
		</tr>
		<tr>

			<td>3</td>
			<td>0x03</td>
			<td>Kết nối vị từ chối: server không phục vụ được</td>
		</tr>
		<tr>
			<td>4</td>
			<td>0x04</td>

			<td>Kết nối bị từ chối: Sai user name hoặc password</td>
		</tr>
		<tr>
			<td>5</td>
			<td>0x05</td>
			<td>Kết nối bị từ chối: Chưa được xác thực</td>
		</tr>

		<tr>
			<td>6-255</td>
			<td></td>
			<td>Dành cho tương lai</td>
		</tr>
	</tbody>
</table>
<p>Mã trả về là 2 sẽ (định danh bị từ chối) sẽ được gửi nếu nếu định danh duy nhất cho 1 client có độ dài không nằm trong khoảng từ 1 đến 23.</p>


<h3>Payload</h3>
<p>Không có payload.</p>


<h2 id="publish">3.3. PUBLISH - Message Publish</h2>
<p>Một message PUBLISH được gửi từ một client đến server để phân tán chúng đến các subscriber cần chúng. Mỗi message luôn gắn liền với một  topic name (cũng được hiểu là Subject hoặc Channel).
Topic là có dạng không gian phân cấp, nó định nghĩa ra một cách phân loại nguồn thông tin để cho các subscribers có thể subscribe nếu muốn.Một message được published đến một topic nào đó sẽ được phân phát đến các subscriber quan tâm đến topic đó  .</p>
<p>Nếu 1 client subscribe một hoặc nhiều topic, thì mọi message được published đến những topic đó đuwocjw gửi bởi server đến client như là một message PUBLISH.</p>

<h3>Fixed header</h3>

<p>Bảng dưới đây chỉ ra định dạng phần header cố định.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message type (3)</td>
			<td align="center">DUP flag</td>

			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length</td>
		</tr>
	</tbody>
</table>
<dl>

	<dt>QoS level</dt>
	<dd>Set là 1. Xem thêm về <a href="#qos-flag">QoS</a> để biết thêm chi tiết.</dd>


	<dt>DUP flag</dt>
	<dd>Set là  (0). Có nghĩa là message được gửi ở lần đầu tiên . Xem thêm  <a href="#dup-flag">DUP</a> để biết chi tiết.
	</dd>


	<dt>RETAIN flag</dt>
	<dd><p>Set to zero. This means do not retain. See <a href="#retain-flag">Retain</a> for more details.</p></dd>


	<dt>Remaining Length field</dt>
	<dd>The length of the variable header plus the length of the
	payload. It can be a multibyte field.</dd>

</dl>


<h3>Variable header</h3>
<p>The variable header contains the following fields:</p>
<dl>

	<dt>Topic name</dt>
	<dd>A UTF-encoded string.
   <p>This must not contain <a href="#appendix-a">Topic wildcard</a> characters.</p>
   <p>When received by a client that subscribed using wildcard characters, 
   this string will be the absolute topic specified by the originating publisher and <em>not</em> the
   subscription string used by the client.</p>
   </dd>


	<dt>Message ID</dt>
	<dd>Present for messages with QoS level 1 and QoS level 2. See <a href="#msg-id">Message identifiers</a> for more details.
	</dd>

</dl>
<p>The table below shows an example variable header for a PUBLISH
message.</p>
<table>
	<thead>
		<tr>
			<td>Field</td>
			<td>Value</td>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>Topic Name:</td>
			<td>"a/b"</td>
		</tr>
		<tr>
			<td>QoS level</td>

			<td>1</td>
		</tr>
		<tr>
			<td>Message ID:</td>
			<td>10</td>
		</tr>
	</tbody>

</table>
<p>The format of the variable header in this case is shown in the
table below.</p>
<table class="bits">
	<thead>
		<tr>
			<th></th>
			<th>Description</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td colspan="10" align="center">Topic Name</td>
		</tr>
		<tr>
			<td>byte 1</td>

			<td>Length MSB (0)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td>Length LSB (3)</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 3</td>
			<td align="center">'a' (0x61)</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 4</td>
			<td align="center">'/' (0x2F)</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>

		</tr>
		<tr>
			<td>byte 5</td>
			<td align="center">'b' (0x62)</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
		</tr>

		<tr>
			<td colspan="10" align="center">Message Identifier</td>
		</tr>
		<tr>
			<td>byte 6</td>
			<td>Message ID MSB (0)</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 7</td>
			<td>Message ID LSB (10)</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

		</tr>
	</tbody>
</table>

<h3>Payload</h3>
<p>Contains the data for publishing. The content and format of the
data is application specific. The Remaining Length field in the fixed
header includes both the variable header length and the payload length. As such,
it is valid for a PUBLISH to contain a 0-length payload.</p>
<h3>Response</h3>
<p>The response to a PUBLISH message depends on the QoS level. The
table below shows the expected responses.</p>
<table>
	<thead>

		<tr>
			<td>QoS Level</td>
			<td>Expected response</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>QoS&nbsp;0</td>

			<td>None</td>
		</tr>
		<tr>
			<td>QoS&nbsp;1</td>
			<td>PUBACK</td>
		</tr>
		<tr>

			<td>QoS&nbsp;2</td>
			<td>PUBREC</td>
		</tr>
	</tbody>
</table>

<h3>Actions</h3>
<p>PUBLISH messages can be sent either from a publisher to the
server, or from the server to a subscriber. The action of the recipient
when it receives a message depends on the QoS level of the message:</p>

<dl>

	<dt>QoS&nbsp;0</dt>
	<dd>Make the message available to any interested parties.</dd>


	<dt>QoS&nbsp;1</dt>
	<dd>Log the message to persistent storage, make it available to
	any interested parties, and return a PUBACK message to the sender.</dd>


	<dt>QoS&nbsp;2</dt>
	<dd>Log the message to persistent storage, do not make it
	available to interested parties yet, and return a PUBREC message to the
	sender.</dd>

</dl>
<p>If the server receives the message, interested parties means
subscribers to the topic of the PUBLISH message. If a subscriber
receives the message, interested parties means the application on the
client which has subscribed to one or more topics, and is waiting for a
message from the server.</p>
<p>See <a href="#qos-flows">Quality of Service levels and flows</a> for more details.</p>
<p>Note that if a server implementation does not authorize a PUBLISH
to be made by a client, it has no way of informing that client.  It must
therefore make a positive acknowledgement, according to the normal QoS 
rules, and the client will <em>not</em> be informed that it was not 
authorized to publish the message.</p>


<h2 id="puback">3.4. PUBACK - Publish acknowledgment</h2>
<p>A PUBACK message is the response to a <a href="#publish">PUBLISH</a>
message with QoS level 1. A PUBACK message is sent by a server in
response to a PUBLISH message from a publishing client, and by a
subscriber in response to a <a href="#publish">PUBLISH</a> message from
the server.</p>

<h3>Fixed header</h3>

<p>The table below shows the format of the fixed header.</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (4)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>

			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
		</tr>

		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length (2)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>

<dl>

	<dt>QoS level</dt>
	<dd>Not used.</dd>


	<dt>DUP flag</dt>
	<dd>Not used.</dd>


	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>

	<dt>Remaining Length field</dt>
	<dd>This is the length of the variable header (2 bytes). It can be
	a multibyte field.</dd>

</dl>

<h3>Variable header</h3>
<p>Contains the Message Identifier (Message ID) for the <a href="#publish">PUBLISH</a> message that is being acknowledged. The
table below shows the format of the variable header.</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="8" align="center">Message ID MSB</td>
		</tr>
		<tr>
			<td>byte 2</td>

			<td colspan="8" align="center">Message ID LSB</td>
		</tr>
	</tbody>
</table>

<h3>Payload</h3>
<p>There is no payload.</p>


<h3>Actions</h3>

<p>When the client receives the PUBACK message, it discards the
original message, because it is also received (and logged) by the
server.</p>


<h2 id="pubrec">3.5. PUBREC - Assured publish received (part 1)</h2>
<p>A PUBREC message is the response to a <a href="#publish">PUBLISH</a>
message with QoS level 2. It is the second message of the QoS level 2
protocol flow. A PUBREC message is sent by the server in response to a <a href="#publish">PUBLISH</a> message from a publishing client, or by a
subscriber in response to a <a href="#publish">PUBLISH</a> message from
the server.</p>

<h3>Fixed header</h3>
<p>The table below shows the fixed header format.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (5)</td>
			<td align="center">DUP flag</td>

			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length (2)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<dl>

	<dt>QoS level</dt>
	<dd>Not used.</dd>

	<dt>DUP flag</dt>
	<dd>Not used.</dd>


	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>


	<dt>Remaining Length field</dt>
	<dd>The length of the variable header (2 bytes). It can be a
	multibyte field.</dd>

</dl>

<h3>Variable header</h3>
<p>The variable header contains the Message ID for the acknowledged
<a href="#publish">PUBLISH</a>. The table below shows the format of the
variable header.</p>
<table class="bits">
	<thead>

		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td>byte 1</td>
			<td colspan="8" align="center">Message ID MSB</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Message ID LSB</td>

		</tr>
	</tbody>
</table>

<h3>Payload</h3>
<p>There is no payload.</p>

<h3>Actions</h3>
<p>When it receives a PUBREC message, the recipient sends a PUBREL
message to the sender with the same Message ID as the PUBREC message.</p>


<h2 id="pubrel">3.6. PUBREL - Assured Publish Release (part 2)</h2>
<p>A PUBREL message is the response either from a publisher to a
<a href="#pubrec">PUBREC</a> message from the server, or from the 
server to a <a href="#pubrec">PUBREC</a> message
from a subscriber. It is the third message in the QoS 2 protocol
flow.</p>

<h3>Fixed header</h3>
<p>The table below shows the fixed header format.</p>
<table class="bits">
	<thead>

		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (6)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>

		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">x</td>
		</tr>
		<tr>
			<td>byte 2</td>

			<td colspan="8" align="center">Remaining Length (2)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
		</tr>

	</tbody>
</table>
<dl>

	<dt>QoS level</dt>
	<dd><p>PUBREL messages use QoS level 1 as an acknowledgement is expected 
   in the form of a <a href="#pubcomp">PUBCOMP</a>. Retries are handled in the same way as <a href="#publish">PUBLISH</a> messages.</p></dd>


	<dt>DUP flag</dt>
	<dd><p>Set to zero (0). This means that the message is being sent for
	the first time. See <a href="#dup-flag">DUP</a> for more details.</p></dd>


	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>


	<dt>Remaining Length field</dt>
	<dd>The length of the variable header (2 bytes). It can be a
	multibyte field.</dd>

</dl>

<h3>Variable header</h3>
<p>The variable header contains the same Message ID as the <a href="#pubrec">PUBREC</a>
message that is being acknowledged. The table below shows the format of
the variable header.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>

			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>

			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>

			<td colspan="8" align="center">Message ID MSB</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Message ID LSB</td>
		</tr>
	</tbody>

</table>

<h3>Payload</h3>
<p>There is no payload.</p>

<h3>Actions</h3>
<p>When the server receives a PUBREL message from a publisher, the
server makes the original message available to interested subscribers,
and sends a PUBCOMP message with the same Message ID to the publisher.
When a subscriber receives a PUBREL message from the server, the
subscriber makes the message available to the subscribing application
and sends a PUBCOMP message to the server.</p>


<h2 id="pubcomp">3.7. PUBCOMP - Assured publish complete (part 3)</h2>
<p>This message is either the response from the server to a <a href="#pubrel">PUBREL</a>

message from a publisher, or the response from a subscriber to a <a href="#pubrel">PUBREL</a>
message from the server. It is the fourth and last message in the
QoS 2 protocol flow.</p>

<h3>Fixed header</h3>

<p>The table below shows the fixed header format.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>

			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>

			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>

			<td colspan="4" align="center">Message Type (7)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length (2)</td>
		</tr>

		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<dl>

	<dt>QoS level</dt>

	<dd>Not used.</dd>


	<dt>DUP flag</dt>
	<dd>Not used.</dd>


	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>


	<dt>Remaining Length field</dt>
	<dd>The length of the variable header (2 bytes). It can be a
	multibyte field.</dd>

</dl>

<h3>Variable header</h3>
<p>The variable header contains the same Message ID as the
acknowledged PUBREL message.</p>
<table class="bits">
	<thead>

		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td>byte 1</td>
			<td colspan="8" align="center">Message ID MSB</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Message ID LSB</td>

		</tr>
	</tbody>
</table>

<h3>Payload</h3>
<p>There is no payload.</p>

<h3>Actions</h3>
<p>When the client receives a PUBCOMP message, it discards the
original message because it has been delivered, exactly once, to the
server.</p>


<h2 id="subscribe">3.8. SUBSCRIBE - Subscribe to named topics</h2>
<p>The SUBSCRIBE message allows a client to register an interest in
one or more topic names with the server. Messages published to these
topics are delivered from the server to the client as <a href="#publish">PUBLISH</a>
messages. The SUBSCRIBE message also specifies the QoS level at which
the subscriber wants to receive published messages.</p>

<h3>Fixed header</h3>
<p>The table below shows the fixed header format.</p>
<table class="bits">
	<thead>
		<tr>

			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>

			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>

			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (8)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>

		<tr>
			<td></td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">x</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length</td>

		</tr>
	</tbody>
</table>
<dl>
	<dt>QoS level</dt>
	<dd>SUBSCRIBE messages use QoS level 1 to acknowledge multiple
	subscription requests. The corresponding SUBACK message is identified
	by matching the Message ID. Retries are handled in the same way as <a href="#publish">PUBLISH</a> messages.</dd>

	<dt>DUP flag</dt>
	<dd><p>Set to zero (0). This means that the message is being sent for
	the first time. See <a href="#dup-flag">DUP</a> for more details.</p></dd>

	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>


	<dt>Remaining Length field</dt>

	<dd>The length of the payload. It can be a multibyte field.</dd>
</dl>


<h3>Variable header</h3>
<p>The variable header contains a Message ID because a SUBSCRIBE
message has a QoS level of 1.  See <a href="#msg-id">Message identifiers</a> for more details.</p>
<p>The table below shows an example format for the variable header
with a Message ID of 10.</p>
<table class="bits">

	<thead>
		<tr>
			<th></th>
			<th>Description</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td colspan="10">Message Identifier</td>
		</tr>
		<tr>
			<td>byte 1</td>
			<td>Message ID MSB (0)</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td>Message ID LSB (10)</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>

<h3>Payload</h3>
<p>The payload of a SUBSCRIBE message contains a list of topic names
to which the client wants to subscribe, and the QoS level at which the
client wants to receive the messages. The strings are UTF-encoded, and
the QoS level occupies 2 bits of a single byte. The topic strings may
contain special <a href="#appendix-a">Topic wildcard</a> characters
to represent a set of topics. These topic/QoS pairs
are packed contiguously as shown in the example payload in the table
below.</p>
<table>
	<tbody>
		<tr>

			<td>Topic name</td>
			<td>"a/b"</td>
		</tr>
		<tr>
			<td>Requested QoS</td>
			<td>1</td>
		</tr>

		<tr>
			<td>Topic name</td>
			<td>"c/d"</td>
		</tr>
		<tr>
			<td>Requested QoS</td>
			<td>2</td>

		</tr>
	</tbody>
</table>
<p>Topic names in a SUBSCRIBE message are not compressed.</p>
<p>The format of the example payload is shown in the table below.</p>
<table class="bits">
	<thead>
		<tr>
			<th></th>
			<th>Description</th>

			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>

			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td colspan="10">Topic name</td>

		</tr>
		<tr>
			<td>byte 1</td>
			<td>Length MSB (0)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>

		<tr>
			<td>byte 2</td>
			<td>Length LSB (3)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 3</td>
			<td align="center">'a' (0x61)</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 4</td>
			<td align="center">'/' (0x2F)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 5</td>
			<td align="center">'b' (0x62)</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
		</tr>

		<tr>
			<td colspan="10">Requested QoS</td>
		</tr>
		<tr>
			<td>byte 6</td>
			<td>Requested QoS (1)</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">0</td>

			<td align="center">1</td>
		</tr>
		<tr>
			<td colspan="10">Topic Name</td>
		</tr>
		<tr>
			<td>byte 7</td>

			<td>Length MSB (0)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 8</td>
			<td>Length LSB (3)</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 9</td>
			<td align="center">'c' (0x63)</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 10</td>
			<td align="center">'/' (0x2F)</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>

		</tr>
		<tr>
			<td>byte 11</td>
			<td align="center">'d' (0x64)</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>

		<tr>
			<td colspan="10">Requested QoS</td>
		</tr>
		<tr>
			<td>byte 12</td>
			<td>Requested QoS (2)</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">1</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<p>Assuming that the requested QoS level is granted, the client
receives <a href="#publish">PUBLISH</a> messages at less than or equal
to this level, depending on the QoS level of the original message from
the publisher. For example, if a client has a QoS level 1 subscription
to a particular topic, then a QoS level 0 <a href="#publish">PUBLISH</a>
message to that topic is delivered to the client at QoS level 0. A QoS
level 2 <a href="#publish">PUBLISH</a> message to the same topic is
downgraded to QoS level 1 for delivery to the client.</p>

<p>A corollary to this is that subscribing to a topic at QoS level 2
is equivalent to saying "I would like to receive messages on this topic
at the QoS at which they are published".</p>

<p>This means a publisher is responsible for determining
the maximum QoS a message can be delivered at, but a subscriber is able to
downgrade the QoS to one more suitable for its usage. The QoS of a message
is never upgraded.</p>

<p>The Requested QoS field is encoded in the byte following each
UTF-encoded topic name as shown in the table below.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td>Reserved</td>
			<td>Reserved</td>
			<td>Reserved</td>

			<td>Reserved</td>
			<td>Reserved</td>
			<td>Reserved</td>
			<td colspan="2" align="center">QoS level</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<p>The upper 6 bits of this byte are not used in the current version
of the protocol. They are reserved for future use.</p>
<p>A request with both QoS level bits set should be considered an invalid packet
and the connection closed.</p>

<h3>Response</h3>
<p>When it receives a SUBSCRIBE message from a client, the server
responds with a SUBACK message.</p>
<p>A server may start sending <a href="#publish">PUBLISH</a> messages due to the
subscription before the client receives the SUBACK message.</p>

<p>Note that if a server implementation does not authorize a SUBSCRIBE request
to be made by a client, it has no way of informing that client.  It must
therefore make a positive acknowledgement with a SUBACK, and the client 
will <em>not</em> be informed that it was not authorized to subscribe.</p>

<p>A server may chose to grant a lower level of QoS than the client requested. This
could happen if the server is not able to provide the higher levels of QoS. For example,
if the server does not provider a reliable persistence mechanism it may chose to only
grant subscriptions at QoS 0.</p>


<h2 id="suback">3.9. SUBACK - Subscription acknowledgement</h2>
<p>A SUBACK message is sent by the server to the client to confirm receipt of a 
<a href="#subscribe">SUBSCRIBE</a> message.</p>
<p>A SUBACK message contains a list of granted QoS levels. The order of granted
QoS levels in the SUBACK message matches the order of the topic names in the 
corresponding <a href="#subscribe">SUBSCRIBE</a> message.</p>

<h3>Fixed header</h3>
<p>The table below shows the fixed header format.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (9)</td>
			<td align="center">DUP flag</td>

			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length</td>
		</tr>
	</tbody>
</table>
<dl>
	<dt>QoS level</dt>

	<dd>Not used.</dd>

	<dt>DUP flag</dt>
	<dd>Not used.</dd>

	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>

	<dt>Remaining Length field</dt>
	<dd>The length of the payload. It can be a multibyte field.</dd>

</dl>

<h3>Variable header</h3>
The variable header contains the Message ID for the SUBSCRIBE message 
that is being acknowledged. The table below shows the format of the variable header.
<table class="bits">
	<thead>
		<tr>

			<th></th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>

			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>

			<td>byte 1</td>
			<td colspan="8" align="center">Message ID MSB</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Message ID LSB</td>
		</tr>

	</tbody>
</table>

<h3>Payload</h3>
<p>The payload contains a vector of granted QoS levels. Each level corresponds 
to a topic name in the corresponding SUBSCRIBE message. The order of QoS levels 
in the SUBACK message matches the order of topic name and Requested QoS pairs 
in the SUBSCRIBE message. The Message ID in the variable header enables you to 
match SUBACK messages with the corresponding SUBSCRIBE messages.</p>
<p>The table below shows the Granted QoS field encoded in a byte.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>

			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>

			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td align="center">Reserved</td>

			<td align="center">Reserved</td>
			<td align="center">Reserved</td>
			<td align="center">Reserved</td>
			<td align="center">Reserved</td>
			<td align="center">Reserved</td>
			<td colspan="2" align="center">QoS level</td>

		</tr>
		<tr>
			<td></td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td colspan="2" align="center"></td>
		</tr>
	</tbody>
</table>
<p>The upper 6 bits of this byte are not used in the current version of the protocol. 
They are reserved for future use.</p>
<p>The table below shows an example payload.</p>

<table>
	<tbody><tr>
		<td>Granted QoS</td>
		<td>0</td>
	</tr>
	<tr>
		<td>Granted QoS</td>
		<td>2</td>

	</tr>
</tbody></table>
<p>The table below shows the format of this payload.</p>
<table class="bits">
	<thead>
		<tr>
			<th></th>
			<th>Description</th>
			<th align="center">7</th>

			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>

			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td>Granted QoS (0)</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 1</td>
			<td>Granted QoS (2)</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">1</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>

<h2 id="unsubscribe">3.10. UNSUBSCRIBE - Unsubscribe from named topics</h2>
<p>An UNSUBSCRIBE message is sent by the client to the server to
unsubscribe from named topics.</p>

<h3>Fixed header</h3>
<p>The table below shows an example fixed header format.</p>

<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>

			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>

	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (10)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>

			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">x</td>
		</tr>

		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length</td>
		</tr>
	</tbody>
</table>
<dl>

	<dt>QoS level</dt>

	<dd>UNSUBSCRIBE messages use QoS level 1 to acknowledge multiple unsubscribe
	requests. The corresponding UNSUBACK message is identified by the
	Message ID. Retries are handled in the same way as <a href="#publish">PUBLISH</a>
	messages.</dd>

	<dt>DUP flag</dt>
	<dd><p>Set to zero (0). This means that the message is being sent for
	the first time. See <a href="#dup-flag">DUP</a> for more details.</p></dd>


	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>


	<dt>Remaining Length</dt>
	<dd>This is the length of the Payload. It can be a multibyte
	field.</dd>

</dl>

<h3>Variable header</h3>
<p>The variable header contains a Message ID because an UNSUBSCRIBE
message has a QoS level of 1. See <a href="#msg-id">Message identifiers</a> for more details.</p>
<p>The table below shows an example format for the variable header
with a Message ID of 10.</p>
<table class="bits">
	<thead>
		<tr>

			<th></th>
			<th>Description</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td colspan="10">Message Identifier</td>
		</tr>
		<tr>
			<td>byte 1</td>
			<td>Message ID MSB (0)</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td>Message ID LSB (10)</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

		</tr>
	</tbody>
</table>

<h3>Payload</h3>
<p>The client unsubscribes from the list of topics named in the
payload. The strings are UTF-encoded and are packed contiguously. Topic
names in a UNSUBSCRIBE message are not compressed. The table below shows
an example payload.</p>
<table>
	<tbody>
		<tr>
			<td>Topic Name</td>

			<td>"a/b"</td>
		</tr>
		<tr>
			<td>Topic Name</td>
			<td>"c/d"</td>
		</tr>
	</tbody>
</table>
<p>The table below shows the format of this payload.</p>
<table class="bits">
	<thead>
		<tr>
			<th></th>
			<th>Description</th>
			<th align="center">7</th>

			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>

			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td colspan="10">Topic Name</td>
		</tr>
		<tr>

			<td>byte 1</td>
			<td>Length MSB (0)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 2</td>

			<td>Length LSB (3)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 3</td>
			<td align="center">'a' (0x61)</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 4</td>
			<td align="center">'/' (0x2F)</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 5</td>
			<td align="center">'b' (0x62)</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>

		</tr>
		<tr>
			<td colspan="10">Topic Name</td>
		</tr>
		<tr>
			<td>byte 6</td>
			<td>Length MSB (0)</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
		<tr>
			<td>byte 7</td>
			<td>Length LSB (3)</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">1</td>
		</tr>
		<tr>
			<td>byte 8</td>
			<td align="center">'c' (0x63)</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

		</tr>
		<tr>
			<td>byte 9</td>
			<td align="center">'/' (0x2F)</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
		</tr>

		<tr>
			<td>byte 10</td>
			<td align="center">'d' (0x64)</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>

	</tbody>
</table>

<h3>Response</h3>
<p>The server sends an UNSUBACK to a client in response to an
UNSUBSCRIBE message.</p>


<h2 id="unsuback">3.11. UNSUBACK - Unsubscribe acknowledgment</h2>
<p>The UNSUBACK message is sent by the server to the client to
confirm receipt of an <a href="#unsubscribe">UNSUBSCRIBE</a> message.</p>

<h3>Fixed header</h3>
<p>The table below shows the fixed header format.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (11)</td>
			<td align="center">DUP flag</td>

			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">1</td>
			<td align="center">0</td>

			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining length (2)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">1</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<dl>

	<dt>QoS level</dt>
	<dd>Not used.</dd>

	<dt>DUP flag</dt>
	<dd>Not used.</dd>


	<dt>RETAIN flag</dt>
	<dd>Not used.</dd>


	<dt>Remaining Length</dt>
	<dd>The length of the Variable Header (2 bytes).</dd>

</dl>

<h3>Variable header</h3>
<p>The variable header contains the Message ID for the <a href="#unsubscribe">UNSUBSCRIBE</a>
message that is being acknowledged. The table below shows the format of
the variable header.</p>
<table class="bits">

	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>

			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>

		<tr>
			<td>byte 1</td>
			<td colspan="8" align="center">Message ID MSB</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Message ID LSB</td>

		</tr>
	</tbody>
</table>

<h3>Payload</h3>
<p>There is no payload.</p>



<h2 id="pingreq">3.12. PINGREQ - PING request</h2>
<p>The PINGREQ message is an "are you alive?" message that is sent
from a connected client to the server.</p>
<p>See <a href="#keep-alive-timer">Keep Alive timer</a> for more details.</p>

<h3>Fixed header</h3>
<p>The table below shows the fixed header format.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>
			<th align="center">6</th>

			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>
			<th align="center">0</th>

		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (12)</td>
			<td align="center">DUP flag</td>

			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">1</td>
			<td align="center">1</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length (0)</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<p>The DUP, QoS, and RETAIN flags are not used.</p>

<h3>Variable header</h3>
<p>There is no variable header.</p>

<h3>Payload</h3>

<p>There is no payload.</p>

<h3>Response</h3>
<p>The response to a PINGREQ message is a PINGRESP message.</p>


<h2 id="pingresp">3.13. PINGRESP - PING response</h2>
<p>A PINGRESP message is the response sent by a server to a <a href="#pingreq">PINGREQ</a>
message and means "yes I am alive". </p>
<p>See <a href="#keep-alive-timer">Keep Alive timer</a> for more details.</p>

<h3>Fixed header</h3>

<p>The table below shows the fixed header format:</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>
			<th align="center">7</th>

			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>
			<th align="center">1</th>

			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>
			<td colspan="4" align="center">Message Type (13)</td>

			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>
			<td align="center">1</td>

			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">1</td>
			<td align="center">x</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length (0)</td>
		</tr>
		<tr>

			<td></td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<p>The DUP, QoS, and RETAIN flags are not used.</p>

<h3>Payload</h3>
<p>There is no payload.</p>

<h3>Variable header</h3>
<p>There is no variable header.</p>




<h2 id="disconnect">3.14. DISCONNECT - Disconnect notification</h2>
<p>The DISCONNECT message is sent from the client to the server to
indicate that it is about to close its TCP/IP connection. This allows
for a clean disconnection, rather than just dropping the line.</p>

<p>If the client had connected with the 
<a href="#clean-session-flag">clean session flag</a> set, then all previously 
maintained information about the client will be discarded.</p>

<p>A server should not rely on the client to close
the TCP/IP connection after receiving a DISCONNECT.</p>

<h3>Fixed header</h3>

<p>The fixed header format is shown in the table below.</p>
<table class="bits">
	<thead>
		<tr>
			<th>bit</th>

			<th align="center">7</th>
			<th align="center">6</th>
			<th align="center">5</th>
			<th align="center">4</th>
			<th align="center">3</th>
			<th align="center">2</th>

			<th align="center">1</th>
			<th align="center">0</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>byte 1</td>

			<td colspan="4" align="center">Message Type (14)</td>
			<td align="center">DUP flag</td>
			<td colspan="2" align="center">QoS level</td>
			<td align="center">RETAIN</td>
		</tr>
		<tr>
			<td></td>

			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">1</td>
			<td align="center">0</td>
			<td align="center">x</td>
			<td align="center">x</td>

			<td align="center">x</td>
			<td align="center">x</td>
		</tr>
		<tr>
			<td>byte 2</td>
			<td colspan="8" align="center">Remaining Length (0)</td>
		</tr>

		<tr>
			<td></td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>

			<td align="center">0</td>
			<td align="center">0</td>
			<td align="center">0</td>
		</tr>
	</tbody>
</table>
<p>The DUP, QoS, and RETAIN flags are not used in the DISCONNECT
message.</p>

<h3>Payload</h3>
<p>There is no payload.</p>

<h3>Variable header</h3>
<p>There is no variable header.</p>
</div>
<div id="flows-section">
<h1 id="flows">4. Flows</h1>
<h2 id="qos-flows">4.1. Quality of Service levels and flows</h2>
<p>MQTT delivers messages according to the levels defined in a
Quality of Service (QoS). The levels are described below:</p>

<dl>

	<dt>QoS level 0: At most once delivery</dt>
	<dd>The message is delivered according to the best efforts of the
	underlying TCP/IP network. A response is not expected and no retry
	semantics are defined in the protocol. The message arrives at the
	server either once or not at all.
	<p>The table below shows the QoS level 0 protocol flow.</p>
	<table class="flow">
		<thead>
			<tr>
				<th align="center">Client</th>

				<th align="center">Message and direction</th>
				<th align="center">Server</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>QoS = 0</td>

				<td align="center">PUBLISH <br>
				<code>----------&gt;</code></td>
				<td><b>Action:</b> Publish message to subscribers</td>
			</tr>
		</tbody>
	</table>

	</dd>


	<dt>QoS level 1: At least once delivery</dt>
	<dd>The receipt of a message by the server is acknowledged by a
	PUBACK message. If there is an identified failure of either the
	communications link or the sending device, or the acknowledgement
	message is not received after a specified period of time, the sender
	resends the message with the DUP bit set in the message header. The
	message arrives at the server at least once. Both SUBSCRIBE and
	UNSUBSCRIBE messages use QoS level 1.
	<p>A message with QoS level 1 has a Message ID in the message
	header.</p>
	<p>The table below shows the QoS level 1 protocol flow.</p>

	<table class="flow">

		<thead>
			<tr>
				<th align="center">Client</th>
				<th align="center">Message and direction</th>
				<th align="center">Server</th>
			</tr>
		</thead>

		<tbody>
			<tr>
				<td>QoS = 1<br>
				DUP = 0<br>
				Message ID = x
            <p><b>Action:</b> Store message</p></td>
				<td align="center">PUBLISH <br>
				<code>----------&gt;</code></td>

				<td><b>Actions:</b>
				<ul>
					<li><p>Store message</p></li>
					<li>Publish message to subscribers</li>
					<li><p>Delete message</p></li>
				</ul>
				</td>
			</tr>

			<tr>
				<td><b>Action:</b> Discard message</td>
				<td align="center">PUBACK <br>
				<code>&lt;----------</code></td>
				<td></td>
			</tr>

		</tbody>
	</table>
	<p>If the client does not receive a PUBACK message (either within a
	time period defined in the application, or if a failure is detected and
	the communications session is restarted), the client may resend the <a href="#publish">PUBLISH</a> message with the DUP flag set.</p>
	<p>When it receives a duplicate message from the client, the server
	republishes the message to the subscribers, and sends another PUBACK
	message.</p>
	</dd>


	<dt>QoS level 2: Exactly once delivery</dt>
	<dd>Additional protocol flows above QoS level 1 ensure that
	duplicate messages are not delivered to the receiving application. This
	is the highest level of delivery, for use when duplicate messages are
	not acceptable. There is an increase in network traffic, but it is
	usually acceptable because of the importance of the message content.
	<p>A message with QoS level 2 has a Message ID in the message
	header.</p>
	<p>The table below shows the QoS level 2 protocol flow.
	There are two semantics available for how a PUBLISH flow should be handled
	by the recipient. They affect the point within the flow that the message
   is made available to the subscribers. The choice of semantic is implementation
	specific and does not affect the guarantees of a QoS level 2 flow.</p>
<p>
	<table class="flow">
		<thead>
			<tr>
				<th align="center">Client</th>
				<th align="center">Message and direction</th>
				<th align="center">Server</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>QoS = 2<br>
				DUP = 0<br>
				Message ID = x
            <p><b>Action:</b> Store message</p></td>
				<td align="center">PUBLISH <br>
				<code>----------&gt;</code></td>
				<td><b>Action:</b> Store message
					<p align="center"><i>or</i></p>
					<b>Actions:</b>
					<ul>
 						<li>Store message ID</li>
						<li>Publish message to subscribers</li>
					</ul>
				</td>

			</tr>
			<tr>
				<td></td>
				<td align="center">PUBREC <br>
				<code>&lt;----------</code></td>
				<td>Message ID = x</td>
			</tr>

			<tr>
				<td>Message ID = x</td>
				<td align="center">PUBREL <br>
				<code>----------&gt;</code></td>
				<td><b>Actions:</b>
				<ul>
					<li>Publish message to subscribers</li>
					<li>Delete message</li>
				</ul>
				<p align="center"><i>or</i></p>
				<b>Action:</b> Delete message ID
				</td>
			</tr>
			<tr>
				<td><b>Action:</b> Discard message</td>
				<td align="center">PUBCOMP <br>

				<code>&lt;----------</code></td>
				<td>Message ID = x</td>
			</tr>
		</tbody>
	</table>
</p>
	<p>If a failure is detected, or after a defined time period, the
   protocol flow is retried from the last unacknowledged protocol message; either
   the PUBLISH or PUBREL. See <a href="#retry">Message delivery retry</a> for more
   details. The additional protocol flows ensure that the message is delivered to
	subscribers once only.</p>
	</dd>

</dl>

<h3>Assumptions for QoS levels 1 and 2</h3>
<p>In any network, it is possible for devices or communication links
to fail. If this happens, one end of the link might not know what is
happening at the other end; these are known as <i>in doubt</i> windows.
In these scenarios assumptions have to be made about the reliability of
the devices and networks involved in message delivery.</p>
<p>MQTT assumes that the client and server are generally reliable,
and that the communications channel is more likely to be unreliable. If
the client device fails, it is typically a catastrophic failure, rather
than a transient one. The possibility of recovering data from the device
is low. Some devices have non-volatile storage, for example flash ROM.
The provision of more persistent storage on the client device protects
the most critical data from some modes of failure.</p>
<p>Beyond the basic failure of the communications link, the failure
mode matrix becomes complex, resulting in more scenarios than the
specification for MQTT can handle.</p>

<h2 id="retry">4.2. Message delivery retry</h2>
<p>Although TCP normally guarantees delivery of packets, there
are certain scenarios where an MQTT message may not be received.
In the case of MQTT messages that expect a response (QoS &gt;0 PUBLISH, PUBREL, SUBSCRIBE,
UNSUBSCRIBE), if the response is not received within a certain time period,
the sender may retry delivery. The sender should set the <a href="#dup-flag">DUP</a> flag
on the message.</p>
<p>The retry timeout should be a configurable option. However care must be taken to 
ensure message delivery does not timeout while it is still being sent. For example, sending a
large message over a slow network will naturally take longer than a small message over a fast network.
Repeatedly retrying a timed-out message could often make matters worse so a strategy of increasing the
timeout value across multiple retries should be used.
</p>
<p>When a client reconnects, if it is not marked <a href="#clean-session-flag">clean session</a>,
both the client and server should redeliver any previous in-flight messages.</p>
<p>Other than this "on reconnect" retry behaviour, clients are not required to
retry message delivery. Brokers, however, should retry any unacknowledged message.</p>

<h2 id="ordering">4.3. Message ordering</h2>
<p>Message ordering can be affected by a number of factors, including
how many in-flight <a href="#publish">PUBLISH</a> flows a client allows and
whether the client is single- or multi-threaded. For purposes of discussion, clients are 
assumed to be single-threaded at the point packets are written to and read from the network.</p>
<p>For an implementation to provide any guarantees regarding the ordering of messages
it must ensure each stage of the message delivery flows are completed in the order they were started. 
For example, in a series of QoS level 2 flows, the PUBREL flows must be sent in the same order as the original
PUBLISH flows:</p>

<table class="flow">
		<thead>
			<tr>
				<th align="center">Client</th>

				<th align="center">Message and direction</th>
				<th align="center">Server</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBLISH 1<br><code>----------&gt;</code><br>
					PUBLISH 2<br><code>----------&gt;</code><br>
					PUBLISH 3<br><code>----------&gt;</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBREC 1<br><code>&lt;----------</code><br>
					PUBREC 2<br><code>&lt;----------</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBREL 1<br><code>----------&gt;</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBREC 3<br><code>&lt;----------</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBREL 2<br><code>----------&gt;</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBCOMP 1<br><code>&lt;----------</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBREL 3<br><code>----------&gt;</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td align="center">
					PUBCOMP 2<br><code>&lt;----------</code><br>
					PUBCOMP 3<br><code>&lt;----------</code><br>
				</td>
				<td>&nbsp;</td>
			</tr>
		</tbody>
	</table>
<p>The number of in-flight messages permitted also has an effect on the type of guarantees that can be made:
</p><ul>
<li><p>With an in-flight window of 1, each delivery flow is completed before the next one starts. This guarantees
messages are delivered in the order they were submitted.</p></li>
<li><p>With an in-flight window greater than 1, message ordering can only be guaranteed within
the QoS level.</p></li>
</ul>
<p></p>
</div> <!-- /flows -->
</div> <!-- /main -->
<div id="appendices">
<div id="appendix-a">
<h1>Appendix A - Topic wildcards</h1>
<p>A subscription may contain special characters, which allow you to subscribe to 
multiple topics at once.</p>
<p>The topic level separator is used to introduce structure into the topic, and
can therefore be specified within the topic for that purpose.  The multi-level
wildcard and single-level wildcard can be used for subscriptions, but they
cannot be used within a topic by the publisher of a message.</p>
<dl>
	<dt>Topic level separator</dt>
	<dd>The forward slash (/) is used to separate each level within
	a topic tree and provide a hierarchical structure to the topic space. The
	use of the topic level separator is significant when the two wildcard characters
	are encountered in topics specified by subscribers.</dd>
	
	<dt>Multi-level wildcard</dt>
	<dd><p>The number sign (#) is a wildcard character that matches
	any number of levels within a topic. For example, if you subscribe to <span><span class="filepath">finance/stock/ibm/#</span></span>, you receive
	messages on these topics:</p>
	<pre>   finance/stock/ibm
   finance/stock/ibm/closingprice
   finance/stock/ibm/currentprice</pre>
	<p>The multi-level wildcard
	can represent zero or more levels. Therefore, <em>finance/#</em> can also match
	the singular <em>finance</em>, where <em>#</em> represents zero levels. The topic
	level separator is meaningless in this context, because there are no levels
	to separate.  </p>
	<p> The multi-level wildcard can
	be specified only on its own or next to the topic level separator character.
	Therefore, <em>#</em> and <em>finance/#</em> are both valid, but <em>finance#</em> is
	not valid. The multi-level wildcard must be the last character
	used within the topic tree. For example, <em>finance/#</em> is valid but <em>finance/#/closingprice</em> is
	not valid.</p></dd>

	<dt>Single-level wildcard</dt>
	<dd><p>The plus sign (+) is a wildcard character that matches only one topic
	level. For example, <em>finance/stock/+</em> matches <em>finance/stock/ibm</em> and <em>finance/stock/xyz</em>,
	but not <em>finance/stock/ibm/closingprice</em>. Also, because the single-level
	wildcard matches only a single level, <em>finance/+</em> does not match <em>finance</em>.</p>
	<p>The single-level wildcard can be used at any level in the topic tree, and in conjunction
	with the multilevel wildcard. It must be used next to the topic level separator, 
   except when it is specified on its own. Therefore, <em>+</em> and <em>finance/+</em> are
	both valid, but <em>finance+</em> is not valid. The single-level
	wildcard can be used at the end of the topic tree or within the topic tree.
	For example, <em>finance/+</em> and <em>finance/+/ibm</em> are both valid.</p>
	</dd>
</dl>


<h2>Topic semantics and usage</h2>
<p>When you build an application,
the design of the topic tree should take into account the following principles
of topic name syntax and semantics:</p>

<ul>
	<li>A topic must be at least one character long.</li>
	<li>Topic names are case sensitive.  For example, <em>ACCOUNTS</em> and <em>Accounts</em> are
	two different topics.</li>
	<li>Topic names can include the space character.  For example, <em>Accounts
	payable</em> is a valid topic.</li>
	<li>A leading "/" creates a distinct topic.  For example, <em>/finance</em> is
	different from <em>finance</em>. <em>/finance</em> matches "+/+" and "/+", but
	not "+".</li>
	<li>Do not include the null character (Unicode <code>\x0000</code>) in
	any topic.</li>
</ul>

<p>The following principles apply to the construction and content of a topic
tree:</p>
<ul>
	<li>The length is limited to 64k but within that there are no limits to the
	number of levels in a topic tree.</li>
	<li>There can be any number of root nodes; that is, there can be any number
	of topic trees.</li>
</ul>
</div>

</div>




</body></html>
